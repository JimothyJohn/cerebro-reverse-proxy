# tests.py
# AI-generated by GPT-4; please check for errors.
# Enhanced unit tests for app.py using the pytest framework.

import json
import pytest
from cerebro.app import lambda_handler
# tests.py
from unittest.mock import patch
# tests.py
import os

REPLICATE_API_TOKEN = os.environ.get("REPLICATE_API_TOKEN")

@patch('app.requests.post')
@patch('app.requests.get')
@pytest.mark.unit
def test_lambda_handler_valid_request(mock_get, mock_post):
    # Mock the POST request to Replicate API
    mock_post.return_value.status_code = 201
    mock_post.return_value.json.return_value = {
        "id": "test-id",
        "status": "starting"
    }

    # Mock the GET request to poll prediction status
    mock_get.return_value.status_code = 200
    mock_get.return_value.json.return_value = {
        "status": "succeeded",
        "output": "Test output"
    }

    # Rest of your test code


# Helper function to create an event
def create_event(http_method, body, headers=None):
    return {
        "httpMethod": http_method,
        "body": json.dumps(body),
        "headers": headers or {},
        "isBase64Encoded": False,
        "path": "/v1/completions",
        "requestContext": {
            "httpMethod": http_method,
            "resourcePath": "/v1/completions"
        }
    }

@pytest.mark.unit
def test_lambda_handler_valid_request():
    # Test with valid POST request and valid body
    event = create_event(
        http_method="POST",
        body={
            "prompt": "Describe the image.",
            "image_urls": "https://github.com/JimothyJohn/cerebro/blob/master/data/images/zidane.jpg?raw=true",
            "max_tokens": 50,
            "temperature": 0.7,
            "do_sample": True
        },
        headers={
            "Authorization": f"Bearer {REPLICATE_API_TOKEN}"
        }
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] in [200, 500]  # Depending on external API success
    assert "body" in response

@pytest.mark.unit
def test_lambda_handler_missing_prompt():
    # Test with missing 'prompt' in the request body
    event = create_event(
        http_method="POST",
        body={
            "image_urls": "https://example.com/image.jpg"
        },
        headers={
            "Authorization": f"Bearer {REPLICATE_API_TOKEN}"
        }
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 400
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "invalid_request_error"

@pytest.mark.unit
def test_lambda_handler_missing_api_key():
    # Test with missing API key in headers
    event = create_event(
        http_method="POST",
        body={
            "prompt": "Describe the image.",
            "image_urls": "https://example.com/image.jpg"
        }
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 401
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "authentication_error"

@pytest.mark.unit
def test_lambda_handler_invalid_method():
    # Test with invalid HTTP method
    event = create_event(
        http_method="GET",
        body={}
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 405
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "invalid_request_error"

@pytest.mark.unit
def test_lambda_handler_empty_body():
    # Test with empty request body
    event = create_event(
        http_method="POST",
        body={},
        headers={
            "Authorization": f"Bearer {REPLICATE_API_TOKEN}"
        }
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 400
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "invalid_request_error"

@pytest.mark.unit
def test_lambda_handler_missing_image_urls():
    # Test with missing 'image_urls' in the request body
    event = create_event(
        http_method="POST",
        body={
            "prompt": "Describe the image."
        },
        headers={
            "Authorization": f"Bearer {REPLICATE_API_TOKEN}"
        }
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 400
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "invalid_request_error"

@pytest.mark.unit
def test_lambda_handler_invalid_api_key():
    # Test with invalid API key format
    event = create_event(
        http_method="POST",
        body={
            "prompt": "Describe the image.",
            "image_urls": "https://example.com/image.jpg"
        },
        headers={
            "Authorization": "InvalidApiKey"
        }
    )
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 401
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "authentication_error"

@pytest.mark.unit
def test_lambda_handler_endpoint_format():
    # Test to ensure the endpoint format is as expected
    event = create_event(
        http_method="POST",
        body={
            "prompt": "Describe the image.",
            "image_urls": "https://example.com/image.jpg"
        },
        headers={
            "Authorization": f"Bearer {REPLICATE_API_TOKEN}"
        }
    )
    # Modify the path to simulate an incorrect endpoint
    event["path"] = "/v1/incorrect_endpoint"
    context = {}
    response = lambda_handler(event, context)
    # Assuming the Lambda function is only triggered on the correct endpoint
    # and AWS API Gateway handles routing, so this test may be context-specific
    assert response["statusCode"] in [200, 500]  # Depending on external API success

@pytest.mark.unit
def test_lambda_handler_input_format():
    # Test with invalid input format (e.g., non-JSON body)
    event = {
        "httpMethod": "POST",
        "body": "This is not JSON",
        "headers": {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {REPLICATE_API_TOKEN}"
        },
        "isBase64Encoded": False,
        "path": "/v1/completions",
        "requestContext": {
            "httpMethod": "POST",
            "resourcePath": "/v1/completions"
        }
    }
    context = {}
    response = lambda_handler(event, context)
    assert response["statusCode"] == 400
    body = json.loads(response["body"])
    assert "error" in body
    assert body["error"]["type"] == "invalid_request_error"
